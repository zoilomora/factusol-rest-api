openapi: 3.0.0
info:
  title: FactuSOL
  version: '1.0'
  license:
    name: MIT
    url: 'https://github.com/zoilomora/factusol-rest-api/blob/master/LICENSE'
  contact:
    name: Zoilo Mora
    url: 'https://zoilomora.net/'
    email: zoilo.mora@hotmail.com
  description: FactuSOL API definition
servers:
  - url: 'http://127.0.0.1:8000'
    description: Local
paths:
  /agents:
    get:
      summary: Get all agents
      tags:
        - Agents
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Agent'
      operationId: get-agents
      description: Get all agents
  '/agents/{agentId}':
    parameters:
      - schema:
          type: string
        name: agentId
        in: path
        required: true
    get:
      summary: Get a agent
      tags:
        - Agents
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Agent'
        '404':
          description: Not Found
      operationId: get-agents-agentId
      description: Get a agent
  /families:
    get:
      summary: Get all families
      tags:
        - Families
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Family'
      operationId: get-families
      description: Get all families
  /taxes:
    get:
      summary: Get all taxes
      tags:
        - Taxes
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Tax'
      operationId: get-taxes
      description: Get all taxes
  '/families/{familyId}':
    parameters:
      - schema:
          type: string
        name: familyId
        in: path
        required: true
    get:
      summary: Get a family
      tags:
        - Families
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Family'
        '404':
          description: Not Found
      operationId: get-families-familieId
      description: Get a family
  '/taxes/{taxId}':
    parameters:
      - schema:
          type: string
        name: taxId
        in: path
        required: true
    get:
      summary: Get a tax
      tags:
        - Taxes
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tax'
        '404':
          description: Not Found
      operationId: get-taxes-taxId
      description: Get a tax
  /customers:
    get:
      summary: Get all agents
      tags:
        - Customers
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Customer'
      operationId: get-customers
      description: Get all customers
  '/customers/{customerId}':
    parameters:
      - schema:
          type: string
        name: customerId
        in: path
        required: true
    get:
      summary: Get a customer
      tags:
        - Customers
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        '404':
          description: Not Found
      operationId: get-customers-customerId
      description: Get a customer
  /invoices:
    get:
      summary: Get all invoices
      tags:
        - Invoices
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Invoice'
      operationId: get-invoices
      description: Get all invoices
  '/invoices/{serial}-{number}':
    parameters:
      - schema:
          type: string
        name: serial
        in: path
        required: true
      - schema:
          type: string
        name: number
        in: path
        required: true
    get:
      summary: Get a invoice
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Invoice'
        '404':
          description: Not Found
      operationId: get-invoices-id
      description: Get a invoice
components:
  schemas:
    Agent:
      title: Agent
      type: object
      x-examples: {}
      x-tags:
        - Agents
      description: ''
      properties:
        id:
          type: string
        name:
          type: string
        identityDocument:
          type: string
        contact:
          $ref: '#/components/schemas/Contact'
        address:
          $ref: '#/components/schemas/Address'
        commission:
          type: string
      required:
        - id
        - name
        - identityDocument
        - contact
        - address
        - commission
    Family:
      title: Family
      type: object
      properties:
        id:
          type: string
        description:
          type: string
      required:
        - id
        - description
      x-tags:
        - Families
    Tax:
      title: Tax
      type: object
      properties:
        id:
          type: integer
        value:
          type: number
      required:
        - id
        - value
      x-tags:
        - Taxes
    Customer:
      title: Customer
      type: object
      x-tags:
        - Customers
      properties:
        id:
          type: string
        identityDocument:
          type: string
        fiscalName:
          type: string
        contact:
          $ref: '#/components/schemas/Contact'
        address:
          $ref: '#/components/schemas/Address'
      required:
        - id
        - identityDocument
        - fiscalName
        - contact
        - address
    Contact:
      title: Contact
      type: object
      properties:
        workPhone:
          type: string
        personalPhone:
          type: string
        eMail:
          type: string
      required:
        - workPhone
        - personalPhone
        - eMail
      x-tags:
        - Contact
    Address:
      title: Address
      type: object
      properties:
        street:
          type: string
        city:
          type: string
        state:
          type: string
        country:
          type: string
        zipCode:
          type: string
      required:
        - street
        - city
        - state
        - country
        - zipCode
      x-tags:
        - Address
      description: ''
    Invoice:
      title: Invoice
      type: object
      x-tags:
        - Invoices
      description: ''
      properties:
        id:
          type: string
          example: 1-26
          pattern: '[0-9]-[0-9]'
        reference:
          type: string
        createdAt:
          type: string
          format: date-time
        status:
          type: string
          enum:
            - PENDING
            - PARTIAL_PENDING
            - CHARGED
            - BACK
            - CANCELED
        warehouse:
          type: string
        agentId:
          type: integer
        customerId:
          type: integer
        address:
          type: object
          properties:
            name:
              type: string
            identityDocument:
              type: string
            street:
              type: string
            city:
              type: string
            state:
              type: string
            country:
              type: string
            zipCode:
              type: string
        priceLines:
          allOf:
            - properties:
                taxBase:
                  type: number
                net:
                  type: number
                taxPercentage:
                  type: number
                taxAmount:
                  type: number
                typeOfTax:
                  type: number
          type: object
        total:
          type: number
        methodOfPayment:
          type: string
        dueDates:
          allOf:
            - properties:
                date:
                  type: string
                  format: date-time
                amount:
                  type: number
          type: object
        printed:
          type: string
        time:
          type: string
        creatorUserId:
          type: integer
        modifierUserId:
          type: integer
        carrierPrice:
          type: string
          enum:
            - PAID
            - DUE
        typeOfCreation:
          type: integer
        lines:
          allOf:
            - properties:
                position:
                  type: integer
                articleId:
                  type: string
                description:
                  type: string
                quantity:
                  type: number
                price:
                  type: number
                total:
                  type: number
                costPrice:
                  type: number
                discount:
                  type: number
                taxPercentage:
                  type: integer
                size:
                  type: string
                color:
                  type: string
          type: object
      required:
        - id
tags:
  - name: Agents
  - name: Families
  - name: Taxes
  - name: Customers
  - name: Invoices
